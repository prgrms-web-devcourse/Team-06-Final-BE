spring:
  redis:
    host: ${REDIS_HOST}
    port: 6379
  profiles:
    active:
      - local
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - profile
  config:
    import: optional:file:sensitive.env[.properties]

app:
  auth:
    tokenSecret: ${TOKEN_SECRET}
    tokenExpirationMsec: 864000000 # 1000 * 60 * 60 * 4
    refreshTokenSecret: ${REFRESH_TOKEN_SECRET}
    refreshTokenExpirationMsec: 2592000000 #1000 * 60 * 60 * 24 * 30
  cors:
    allowedOrigins: http://localhost:3000, http://localhost:8080, ${FRONT_URI}, ${BACK_URI}
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - ${FRONT_URI}${FRONT_REDIRECT_PATH}
      - http://localhost:3000${FRONT_REDIRECT_PATH}
cloud:
  aws:
    credentials:
      accessKey: ${ACCESS_KEY}
      secretKey: ${SECRET_KEY}
